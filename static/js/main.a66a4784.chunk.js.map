{"version":3,"sources":["TextError.js","FormDemo.jsx","App.js","reportWebVitals.js","index.js"],"names":["TextError","props","style","color","children","checkBoxList","key","value","selectList","RadioList","initialValues","fullName","howMuch","howMany","comments","select","radio","terms","validationSchema","Yup","shape","required","min","max","oneOf","onSubmit","values","formikHelpers","console","log","FormDemo","Card","CardContent","Grid","alignContent","xs","errors","isValidating","isSubmitting","container","spacing","item","name","label","type","options","multiline","rows","rowsMax","FormGroup","Button","variant","fullWidth","disabled","justify","Typography","JSON","stringify","MyCheckBox","useField","field","meta","configFormControl","touched","error","configCheckBox","FormControl","FormLabel","component","map","FormControlLabel","control","Checkbox","MyTextField","rest","configTextField","helperText","TextField","MySelect","configSelect","index","MenuItem","MyRadio","RadioGroup","Radio","MyAcception","configAcception","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uXAUeA,EARG,SAACC,GACf,OACI,qBAAKC,MAAO,CAACC,MAAM,OAAnB,SACKF,EAAMG,YCCbC,EAAe,CACjB,CAACC,IAAK,WAAYC,MAAM,WACxB,CAACD,IAAK,WAAYC,MAAM,WACxB,CAACD,IAAK,WAAYC,MAAM,YAEtBC,EAAa,CACf,CAACF,IAAK,YAAaC,MAAO,IAC1B,CAACD,IAAK,OAAQC,MAAO,GACrB,CAACD,IAAK,MAAOC,MAAO,GACpB,CAACD,IAAK,MAAOC,MAAO,GACpB,CAACD,IAAK,QAASC,MAAO,GACtB,CAACD,IAAK,OAAQC,MAAO,GACrB,CAACD,IAAK,OAAQC,MAAO,IAEnBE,EAAY,CACd,CAACH,IAAK,WAAYC,MAAM,WACxB,CAACD,IAAK,WAAYC,MAAM,WACxB,CAACD,IAAK,WAAYC,MAAM,YAEtBG,EAAgB,CAClBC,SAAS,GACTC,QAAS,EACTC,QAAS,GACTC,SAAU,GACVC,OAAQ,GACRC,MAAM,GACNC,OAAO,GAELC,EAAmBC,MAAaC,MAAM,CACxCT,SAAUQ,MAAaE,SAAS,YAAYC,IAAI,EAAE,YAAYC,IAAI,IAAI,YACtEX,QAASO,MAAaE,SAAS,YAAYC,IAAI,IAAI,sBACnDL,MAAOE,MAAcK,MAAM,EAAC,GAAO,gBACnCT,OAAQI,MAAaE,SAAS,gBAC9BR,QAASM,MAAYG,IAAI,EAAG,eAAeD,WAC3CP,SAAUK,MAAaE,SAAS,YAChCL,MAAOG,MAAaE,SAAS,iBAavBI,EAAW,SAACC,EAAQC,GACtBC,QAAQC,IAAI,SAAUH,GACtBE,QAAQC,IAAI,gBAAiBF,GAC7BC,QAAQC,IAAI,kBAIPC,EAAW,WACpB,OACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAMC,aAAa,SAASC,GAAI,GAAhC,yBACI,cAAC,IAAD,CAAQzB,cAAeA,EAAee,SAAUA,EAAUP,iBAAkBA,EAA5E,SACK,gBAAEQ,EAAF,EAAEA,OAAQU,EAAV,EAAUA,OAAsBC,GAAhC,EAAkBC,aAAlB,EAAgCD,cAAhC,OACG,eAAC,IAAD,WACI,eAACJ,EAAA,EAAD,CAAMM,WAAS,EAACC,QAAS,EAAzB,UACI,cAACP,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,EAAf,SACI,cAAC,EAAD,CAAaO,KAAK,WAAWC,MAAM,YAAYC,KAAK,WAExD,cAACX,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,EAAf,SACQ,cAAC,EAAD,CAAaO,KAAK,UAAUE,KAAK,SAASD,MAAM,yBAExD,cAACV,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,GAAf,SACQ,cAAC,EAAD,CAAYO,KAAK,UAAUE,KAAK,WAAWC,QAASxC,MAE5D,cAAC4B,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,GAAf,SACQ,cAAC,EAAD,CAAaO,KAAK,WAAWC,MAAM,UAAUG,WAAS,EAACC,KAAM,EAAGC,QAAS,OAEjF,cAACf,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,GAAf,SACI,cAACc,EAAA,EAAD,UACI,cAAC,EAAD,CAAUP,KAAK,SAASC,MAAM,mBAAmBE,QAASrC,EAA1D,mBAGR,cAACyB,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,GAAf,SACI,cAAC,EAAD,CAASO,KAAK,QAAQG,QAASpC,MAEnC,cAACwB,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,EAAf,SACI,cAAC,EAAD,CAAaO,KAAK,QAAQE,KAAK,WAAWD,MAAM,kCAEpD,cAACV,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAI,GAAf,SACI,cAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYhD,MAAM,YAAYiD,WAAS,EAACR,KAAK,SAASS,SAAUhB,EAAhF,yBAGR,eAACJ,EAAA,EAAD,CAAMM,WAAS,EAACe,QAAQ,SAAxB,UACI,eAACrB,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAM,EAAjB,UACI,cAACoB,EAAA,EAAD,yBACA,8BAAMC,KAAKC,UAAUrB,EAAQ,KAAM,QAEvC,eAACH,EAAA,EAAD,CAAMQ,MAAI,EAACN,GAAM,EAAjB,UACI,cAACoB,EAAA,EAAD,yBACA,8BAAMC,KAAKC,UAAU/B,EAAQ,KAAM,uBAW9DgC,EAAa,SAACzD,GAAW,IAC3ByC,EAAuBzC,EAAvByC,KAAMG,EAAiB5C,EAAjB4C,QAASD,EAAQ3C,EAAR2C,KADW,EAEXe,YAASjB,GAFE,mBAE1BkB,EAF0B,KAEnBC,EAFmB,KAG3BC,EAAoB,GACvBD,GAAQA,EAAKE,SAAWF,EAAKG,QAC5BF,EAAkBE,OAAQ,GAE9B,IAAMC,EAAc,eACbL,GAEP,OACI,qCACA,eAACM,EAAA,EAAD,2BAAkBJ,GAAlB,cACI,cAACK,EAAA,EAAD,CAAWC,UAAU,SAArB,sCACA,cAACnB,EAAA,EAAD,UACKJ,EAAQwB,KAAI,SAAA5B,GAAI,OACzB,cAAC6B,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,yBAA2B9B,KAAMA,EAAME,KAAMA,GAAUqB,GAAvD,IAAuE1D,MAAOkC,EAAKlC,QAApEkC,EAAKlC,OAAmFoC,MAAOF,EAAKnC,eAI9I,cAAC,IAAD,CAAcoC,KAAMA,EAAM0B,UAAWpE,QAIhCyE,EAAc,SAACxE,GAAW,IAC5ByC,EAA8BzC,EAA9ByC,KAAMC,EAAwB1C,EAAxB0C,MAAOC,EAAiB3C,EAAjB2C,KAAS8B,EADK,YACGzE,EADH,2BAEZ0D,YAASjB,GAFG,mBAE3BkB,EAF2B,KAEpBC,EAFoB,KAG5Bc,EAAe,uCACdf,GACAc,GAFc,IAGjBhC,OACAC,QACAC,OACAO,QAAS,aAMb,OAJIU,GAAQA,EAAKE,SAAWF,EAAKG,QAC7BW,EAAgBX,OAAQ,EACxBW,EAAgBC,WAAaf,EAAKG,OAGtC,cAACf,EAAA,EAAD,UACI,cAAC4B,EAAA,EAAD,eAAeF,OAOVG,EAAW,SAAC7E,GAAW,IACzByC,EAAiCzC,EAAjCyC,KAAMC,EAA2B1C,EAA3B0C,MAAOE,EAAoB5C,EAApB4C,QAAY6B,EADD,YACSzE,EADT,8BAET0D,YAASjB,GAFA,mBAExBkB,EAFwB,KAEjBC,EAFiB,KAGzBkB,EAAY,uCACXnB,GACAc,GAFW,IAGdhC,OACAC,QACAE,UACA9B,QAAQ,EACRoC,QAAS,aAMb,OAJIU,GAAQA,EAAKE,SAAWF,EAAKG,QAC7Be,EAAaf,OAAQ,EACrBe,EAAaH,WAAaf,EAAKG,OAGnC,cAACf,EAAA,EAAD,UACI,cAAC4B,EAAA,EAAD,2BAAeE,GAAf,aACKlC,EAAQwB,KAAI,SAAC5B,EAAMuC,GAAP,OACT,cAACC,EAAA,EAAD,CAA2B1E,MAAOkC,EAAKlC,MAAvC,SAA+CkC,EAAKnC,KAArCmC,EAAKlC,gBASvB2E,EAAU,SAACjF,GAAW,IACxByC,EAA0BzC,EAA1ByC,KAAMG,EAAoB5C,EAApB4C,QAAY6B,EADK,YACGzE,EADH,sBAER0D,YAASjB,GAFD,mBAEvBkB,EAFuB,KAEhBC,EAFgB,KASxBC,GANW,uCACVF,GACAc,GAFU,IAGbhC,OACAG,YAEsB,IAI1B,OAHGgB,GAAQA,EAAKE,SAAWF,EAAKG,QAC5BF,EAAkBE,OAAQ,GAG1B,qCACA,eAACE,EAAA,EAAD,2BAAiBJ,GAAjB,cACI,cAACK,EAAA,EAAD,CAAWC,UAAU,SAArB,wBACA,cAACe,EAAA,EAAD,UACKtC,EAAQwB,KAAI,SAAC5B,GAAD,OACT,cAAC6B,EAAA,EAAD,yBAAmC5B,KAAMA,GAAUkB,GAAnD,IAA0DrD,MAAOkC,EAAKlC,MAAOgE,QAAS,cAACa,EAAA,EAAD,IAAiBzC,MAAOF,EAAKnC,MAA5FmC,EAAKlC,gBAIxC,cAAC,IAAD,CAAcmC,KAAMA,EAAM0B,UAAWpE,QAKhCqF,EAAc,SAACpF,GAAW,IAChCyC,EAA8BzC,EAA9ByC,KAAME,EAAwB3C,EAAxB2C,KAAMD,EAAkB1C,EAAlB0C,MAAU+B,EADS,YACDzE,EADC,2BAEZ0D,YAASjB,GAFG,mBAE3BkB,EAF2B,KAEpBC,EAFoB,KAG5BC,EAAoB,GACvBD,GAAQA,EAAKE,SAAWF,EAAKG,QAC5BF,EAAkBE,OAAQ,GAE9B,IAAMsB,EAAe,uCACd1B,GACAc,GAFc,IAGjBhC,OACAE,OACAD,UAEJ,OACI,qCACA,eAACuB,EAAA,EAAD,2BAAkBJ,GAAlB,cACI,cAACK,EAAA,EAAD,CAAWC,UAAU,SAArB,gCACA,cAACnB,EAAA,EAAD,UACJ,cAACqB,EAAA,EAAD,CAAkBC,QAAS,cAACC,EAAA,EAAD,aAAU9B,KAAMA,GAAU4C,YAGrD,cAAC,IAAD,CAAc5C,KAAMA,EAAM0B,UAAWpE,QCzO9BuF,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCQSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a66a4784.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst TextError = (props) => {\r\n    return (\r\n        <div style={{color:'red'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextError\r\n","import { Card, CardContent, MenuItem, TextField, Typography,FormControl, FormControlLabel, FormLabel, Checkbox, FormGroup, Grid, Button, RadioGroup, Radio } from '@material-ui/core'\r\nimport { Formik, Form, useField, ErrorMessage } from 'formik'\r\nimport React from 'react'\r\nimport * as Yup from 'yup'\r\nimport TextError from './TextError'\r\n\r\nconst checkBoxList = [\r\n    {key: 'Option 1', value:'option1'},\r\n    {key: 'Option 2', value:'option2'},\r\n    {key: 'Option 3', value:'option3'}\r\n]\r\nconst selectList = [\r\n    {key: 'Select...', value: ''},\r\n    {key: 'Zero', value: 0},\r\n    {key: 'One', value: 1},\r\n    {key: 'Two', value: 2},\r\n    {key: 'Three', value: 3},\r\n    {key: 'Four', value: 4},\r\n    {key: 'Five', value: 5}\r\n]\r\nconst RadioList = [\r\n    {key: 'Option 1', value:'option1'},\r\n    {key: 'Option 2', value:'option2'},\r\n    {key: 'Option 3', value:'option3'}\r\n]\r\nconst initialValues = {\r\n    fullName:'',\r\n    howMuch: 0,\r\n    howMany: [],\r\n    comments: '',\r\n    select: '',\r\n    radio:'',\r\n    terms: false\r\n}\r\nconst validationSchema = Yup.object().shape({\r\n    fullName: Yup.string().required('Required').min(2,'To Short').max(100,'To Large'),\r\n    howMuch: Yup.number().required('Required').min(100,'Must more than 100'),\r\n    terms: Yup.boolean().oneOf([true], 'Must Accept!'),\r\n    select: Yup.string().required(\"Must select!\"),\r\n    howMany: Yup.array().min(1, \"Must chose!\").required(),\r\n    comments: Yup.string().required('Required'),\r\n    radio: Yup.string().required('Must chose!'),\r\n    // comments: Yup.mixed().when('howMany', {\r\n    //     is: 'High',\r\n    //     then: Yup.string().required().min(20).max(100),\r\n    //     otherwise: Yup.string().min(20).max(100)\r\n    // }),\r\n    // comments: Yup.mixed().when('howMany', {\r\n    //     is: (howMany) => howMany.find(ir => ir === 'High'),\r\n    //     then: Yup.string().required().min(20).max(100),\r\n    //     otherwise: Yup.string().min(20).max(100)\r\n    // }),\r\n\r\n    })\r\n    const onSubmit = (values, formikHelpers) => {\r\n        console.log('values', values)\r\n        console.log('formikHelpers', formikHelpers)\r\n        console.log('-------------')\r\n    } \r\n\r\n\r\nexport const FormDemo = () => {\r\n    return (\r\n        <Card>\r\n            <CardContent>\r\n                <Grid alignContent='center' xs={12}>New Account</Grid>\r\n                    <Formik initialValues={initialValues} onSubmit={onSubmit} validationSchema={validationSchema}>\r\n                        {({values, errors, isSubmitting, isValidating}) => (\r\n                            <Form>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item xs={6}>\r\n                                        <MyTextField name='fullName' label='Full Name' type='text'></MyTextField>\r\n                                    </Grid>\r\n                                    <Grid item xs={6}>\r\n                                            <MyTextField name='howMuch' type='number' label='Initial Investment'></MyTextField>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                            <MyCheckBox name='howMany' type='checkbox' options={checkBoxList}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                            <MyTextField name='comments' label='Message' multiline rows={3} rowsMax={10}></MyTextField>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <FormGroup>\r\n                                            <MySelect name='select' label='Select Something' options={selectList}> </MySelect>\r\n                                        </FormGroup>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <MyRadio name='radio' options={RadioList}></MyRadio>\r\n                                    </Grid>\r\n                                    <Grid item xs={4}>\r\n                                        <MyAcception name='terms' type='checkbox' label='Accept Terms and Conditions'/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <Button variant='contained' color='secondary' fullWidth type='submit' disabled={isValidating}>Submit</Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container justify='center'>\r\n                                    <Grid item xs = {6}>\r\n                                        <Typography>The Errors</Typography>\r\n                                        <pre>{JSON.stringify(errors, null, 4)}</pre>\r\n                                    </Grid>\r\n                                    <Grid item xs = {6}>\r\n                                        <Typography>The Values</Typography>\r\n                                        <pre>{JSON.stringify(values, null, 4)}</pre>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport const MyCheckBox = (props) => {\r\n    const {name, options, type} = props\r\n    const [field, meta] = useField(name)\r\n    const configFormControl = {};\r\n    if(meta && meta.touched && meta.error) {\r\n        configFormControl.error = true;\r\n    }\r\n    const configCheckBox = {\r\n        ...field,\r\n    }\r\n    return (\r\n        <>\r\n        <FormControl  {...configFormControl}>\r\n            <FormLabel component=\"legend\">Select How Many You Want</FormLabel>\r\n            <FormGroup>\r\n                {options.map(item => (\r\n        <FormControlLabel control={<Checkbox key={item.value} name={name} type={type} {...configCheckBox} value={item.value}></Checkbox>} label={item.key}/>\r\n    ))}\r\n            </FormGroup>\r\n        </FormControl>\r\n        <ErrorMessage name={name} component={TextError}></ErrorMessage>\r\n        </>\r\n    )\r\n}\r\nexport const MyTextField = (props) => {\r\n    const {name, label, type, ...rest} = props\r\n    const [field, meta] = useField(name)\r\n    const configTextField = {\r\n        ...field,\r\n        ...rest,\r\n        name,\r\n        label,\r\n        type,\r\n        variant: 'outlined'\r\n    }\r\n    if (meta && meta.touched && meta.error){\r\n        configTextField.error = true;\r\n        configTextField.helperText = meta.error\r\n    }\r\n    return (\r\n    <FormGroup>\r\n        <TextField {...configTextField}></TextField>\r\n    </FormGroup>\r\n    \r\n    )\r\n}\r\n\r\n\r\nexport const MySelect = (props) => {\r\n    const {name, label, options, ...rest} = props\r\n    const [field, meta] = useField(name)\r\n    const configSelect = {\r\n        ...field,\r\n        ...rest,\r\n        name,\r\n        label,\r\n        options,\r\n        select: true,\r\n        variant: 'outlined'\r\n    }\r\n    if (meta && meta.touched && meta.error){\r\n        configSelect.error = true;\r\n        configSelect.helperText = meta.error\r\n    }\r\n    return (\r\n    <FormGroup>\r\n        <TextField {...configSelect}>\r\n            {options.map((item, index)=>(\r\n                <MenuItem key={item.value} value={item.value}>{item.key}</MenuItem>\r\n            ))}\r\n        </TextField>\r\n    </FormGroup>\r\n    \r\n    )\r\n}\r\n\r\n\r\nexport const MyRadio = (props) => {\r\n    const {name, options, ...rest} = props;\r\n    const [field, meta] = useField(name);\r\n    const configRadio = {\r\n        ...field,\r\n        ...rest,\r\n        name,\r\n        options\r\n    }\r\n    const configFormControl = {}\r\n    if(meta && meta.touched && meta.error) {\r\n        configFormControl.error = true;\r\n    }\r\n    return (\r\n        <>\r\n        <FormControl {...configFormControl}>\r\n            <FormLabel component='legend'>Choose One</FormLabel>\r\n            <RadioGroup>\r\n                {options.map((item)=>(\r\n                    <FormControlLabel key={item.value} name={name} {...field} value={item.value} control={<Radio></Radio>} label={item.key}></FormControlLabel>\r\n                ))}\r\n            </RadioGroup>\r\n        </FormControl>\r\n        <ErrorMessage name={name} component={TextError}></ErrorMessage>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const MyAcception = (props) => {\r\nconst {name, type, label, ...rest} = props\r\n    const [field, meta] = useField(name)\r\n    const configFormControl = {};\r\n    if(meta && meta.touched && meta.error) {\r\n        configFormControl.error = true;\r\n    }\r\n    const configAcception = {\r\n        ...field,\r\n        ...rest,\r\n        name,\r\n        type,\r\n        label,\r\n    }\r\n    return (\r\n        <>\r\n        <FormControl  {...configFormControl}>\r\n            <FormLabel component=\"legend\">Accept Conditions?</FormLabel>\r\n            <FormGroup>\r\n        <FormControlLabel control={<Checkbox name={name} {...configAcception}></Checkbox>}/>\r\n            </FormGroup>\r\n        </FormControl>\r\n        <ErrorMessage name={name} component={TextError}></ErrorMessage>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n                                    ","import {FormDemo} from './FormDemo'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormDemo></FormDemo>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}